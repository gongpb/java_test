reference: http://www.cnblogs.com/gw811/archive/2012/09/07/2676111.html
ThreadLocal适用于：在同一个线程（Thread）的不同开发层次中共享数据
从上面的例子中，我们可以简单总结出实现ThreadLocal模式的两个主要步骤：
1. 建立一个类，并在其中封装一个静态的ThreadLocal变量，使其成为一个共享数据环境。
2. 在类中实现访问静态ThreadLocal变量的静态方法（设值和取值）。

使用ThreadLocal模式，可以对执行逻辑与执行数据进行有效解耦。
这一点是ThreadLocal模式给我们带来的最为核心的一个影响。因为在一般情况下，Java对象之间的协作关系，
主要通过参数和返回值来进行消息传递，这也是对象协作之间的一个重要依赖。而ThreadLocal模式彻底打破了这种依赖关系，
通过线程安全的共享对象来进行数据共享，可以有效避免在编程层次之间形成数据依赖。这也成为了XWork事件处理体系设计的核心。